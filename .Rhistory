total <- list (
lapply(plots_cancer, function(x) {ggplot(x, aes(ESR1, GATA3)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(ESR1, PTEN)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(ESR1, XBP1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(ESR1, MUC1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(ESR1, FN1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(ESR1, GAPDH)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
else if (gen == "MUC1"){
total <- list (
lapply(plots_cancer, function(x) {ggplot(x, aes(MUC1, GATA3)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(MUC1, PTEN)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(MUC1, XBP1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(MUC1, ESR1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(MUC1, FN1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(MUC1, GAPDH)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
else if (gen == "FN1"){
total <- list (
lapply(plots_cancer, function(x) {ggplot(x, aes(FN1, GATA3)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(FN1, PTEN)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(FN1, XBP1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(FN1, ESR1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(FN1, MUC1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(FN1, GAPDH)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
else if (gen == "GAPDH"){
total <- list (
lapply(plots_cancer, function(x) {ggplot(x, aes(GAPDH, GATA3)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(GAPDH, PTEN)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(GAPDH, XBP1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(GAPDH, ESR1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(GAPDH, MUC1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(GAPDH, FN1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
}
# Escriba el código para generar la lista.
reg_gen_expression <- function (gen) {
if (gen == "GATA3"){
total <- list (
lapply(plots_cancer, function(x) {ggplot(x, aes(GATA3, PTEN)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(GATA3, XBP1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(GATA3, ESR1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(GATA3, MUC1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(GATA3, FN1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(GATA3, GAPDH)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
else if (gen == "PTEN"){
total <- list (
lapply(plots_cancer, function(x) {ggplot(x, aes(PTEN, GATA3)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(PTEN, XBP1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(PTEN, ESR1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(PTEN, MUC1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(PTEN, FN1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(PTEN, GAPDH)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
else if (gen == "XBP1"){
total <- list (
lapply(plots_cancer, function(x) {ggplot(x, aes(XBP1, GATA3)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(XBP1, PTEN)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(XBP1, ESR1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(XBP1, MUC1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(XBP1, FN1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(XBP1, GAPDH)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
else if (gen == "ESR1"){
total <- list (
lapply(plots_cancer, function(x) {ggplot(x, aes(ESR1, GATA3)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(ESR1, PTEN)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(ESR1, XBP1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(ESR1, MUC1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(ESR1, FN1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(ESR1, GAPDH)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
else if (gen == "MUC1"){
total <- list (
lapply(plots_cancer, function(x) {ggplot(x, aes(MUC1, GATA3)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(MUC1, PTEN)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(MUC1, XBP1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(MUC1, ESR1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(MUC1, FN1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(MUC1, GAPDH)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
else if (gen == "FN1"){
total <- list (
lapply(plots_cancer, function(x) {ggplot(x, aes(FN1, GATA3)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(FN1, PTEN)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(FN1, XBP1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(FN1, ESR1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(FN1, MUC1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(FN1, GAPDH)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
else if (gen == "GAPDH"){
total <- list (
lapply(plots_cancer, function(x) {ggplot(x, aes(GAPDH, GATA3)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(GAPDH, PTEN)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(GAPDH, XBP1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(GAPDH, ESR1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(GAPDH, MUC1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(GAPDH, FN1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
}
# Escriba el código para guardar el onceavo plot.
graficos_cancer <- reg_gen_expression("GATA3")
graficos_cancer[[5]][[2]]
ggsave("C:/Users/Usuario/Desktop/examen_final/GBI6_ExamenFinal/results/regresion11.pdf", width = 6, height = 8, dpi = 300)
# Escriba el código para guardar el onceavo plot.
graficos_cancer <- expresion_gen_reg("GATA3")
# Escriba el código para guardar el onceavo plot.
graficos_cancer <- expresion_gen_reg("GATA3")
# Escriba el código para guardar el onceavo plot.
graficos_cancer <- expresion_gen_reg("GATA3")
# Escriba el código para generar la lista.
expresion_gen_reg <- function (gen) {
if (gen == "GATA3"){
total <- list (
lapply(plots_cancer, function(x) {ggplot(x, aes(GATA3, PTEN)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(GATA3, XBP1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(GATA3, ESR1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(GATA3, MUC1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(GATA3, FN1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(GATA3, GAPDH)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
else if (gen == "PTEN"){
total <- list (
lapply(plots_cancer, function(x) {ggplot(x, aes(PTEN, GATA3)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(PTEN, XBP1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(PTEN, ESR1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(PTEN, MUC1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(PTEN, FN1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(PTEN, GAPDH)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
else if (gen == "XBP1"){
total <- list (
lapply(plots_cancer, function(x) {ggplot(x, aes(XBP1, GATA3)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(XBP1, PTEN)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(XBP1, ESR1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(XBP1, MUC1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(XBP1, FN1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(XBP1, GAPDH)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
else if (gen == "ESR1"){
total <- list (
lapply(plots_cancer, function(x) {ggplot(x, aes(ESR1, GATA3)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(ESR1, PTEN)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(ESR1, XBP1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(ESR1, MUC1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(ESR1, FN1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(ESR1, GAPDH)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
else if (gen == "MUC1"){
total <- list (
lapply(plots_cancer, function(x) {ggplot(x, aes(MUC1, GATA3)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(MUC1, PTEN)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(MUC1, XBP1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(MUC1, ESR1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(MUC1, FN1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(MUC1, GAPDH)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
else if (gen == "FN1"){
total <- list (
lapply(plots_cancer, function(x) {ggplot(x, aes(FN1, GATA3)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(FN1, PTEN)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(FN1, XBP1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(FN1, ESR1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(FN1, MUC1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(FN1, GAPDH)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
else if (gen == "GAPDH"){
total <- list (
lapply(plots_cancer, function(x) {ggplot(x, aes(GAPDH, GATA3)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(GAPDH, PTEN)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(GAPDH, XBP1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(GAPDH, ESR1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(GAPDH, MUC1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(GAPDH, FN1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
}
# Escriba el código para guardar el onceavo plot.
graficos_cancer <- expresion_gen_reg("GATA3")
df <- read.csv("C:/Users/Usuario/Desktop/examen_final/GBI6_ExamenFinal/data/mRNA_expr.csv")
df
# Escriba aquí la función long_df
long_df <- function(df) {
library(tidyr)
library(dplyr)
df$dataset <- as.factor(df$dataset)
df_l <- gather(df, gen, expresion_level, GATA3, PTEN, XBP1, ESR1, MUC1, FN1, GAPDH, factor_key=TRUE)
df_l2 <- select(df_l, -bcr_patient_barcode)
return (df_l2)
}
# Genere la data df_long
library(dplyr)
df_long <- long_df(df)
tabla <- df_long %>% group_by(gen)
tabla
# Escriba el código para crear el Descriptive table
library(sjPlot)
library(sjmisc)
cancer_de_mama <- tabla %>% group_by(gen) %>% mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = gen, values_from = expresion_level) %>%
select(-row)
descr(cancer_de_mama) %>% tab_df(title = "Estadistica descriptiva del cancer de MAMA y su nivel de expresion de los diferentes genes",
file = "C:/Users/Usuario/Desktop/examen_final/GBI6_ExamenFinal/results/mRNA_expr_summary.doc")
# Escriba el código para crear el Descriptive table
library(sjPlot)
library(sjmisc)
cancer_de_mama <- tabla %>% group_by(gen) %>% mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = gen, values_from = expresion_level) %>%
select(-row)
descr(cancer_de_mama) %>% tab_df(title = "Estadistica descriptiva del cancer de MAMA y su nivel de expresion de los diferentes genes",
file = "C:/Users/Usuario/Desktop/examen_final/GBI6_ExamenFinal/results/mRNA_expr_summary.doc")
# Escriba el código para crear la función tcga_boxplots
library(ggplot2)
box_tcg <- function(dataset) {
library(ggplot2)
return(ggplot (dataset, aes(x = gen, y = expresion_level, col = gen)) + labs(x="Gen", y = "Nivel de Expresion")
+ geom_boxplot() + geom_jitter(size=0.10))
}
box_tcg(df_long)
# Escriba el código para generar la lista.
tipo_de_cancer <- list(
BRCA <- filter(df_long, dataset == "BRCA"),
OV <- filter(df_long, dataset == "OV"),
LUSC <- filter(df_long, dataset == "LUSC"),
KIPAN <- filter(df_long, dataset == "KIPAN"),
KIRP <- filter(df_long, dataset == "KIRP"),
UCEC <- filter(df_long, dataset == "UCEC")
)
tipo_de_cancer_box = lapply(tipo_de_cancer, function(x) {ggplot(x, aes(dataset, expresion_level, col = dataset)) +
geom_boxplot() + theme(legend.position='none') + labs(x = "", y = "Nivel de expresión")})
tipo_de_cancer_box
# Escriba aquí su función reg_gen_expression
tipo_dataset <- list(BRCA <- filter(df_long, dataset == "BRCA"), OV <- filter(df_long, dataset == "OV"),
LUSC <- filter(df_long, dataset == "LUSC"),
KIPAN <- filter(df_long, dataset == "KIPAN"),
KIRP <- filter(df_long, dataset == "KIRP"),
UCEC <- filter(df_long, dataset == "UCEC"),
GAPDH <- filter(df_long, dataset == "GAPDH")
)
plots_cancer <- list (
BRCA_1 <- BRCA %>% group_by(gen) %>% mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = gen, values_from = expresion_level) %>%
select(-row),
OV_1 <- OV %>% group_by(gen) %>% mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = gen, values_from = expresion_level) %>%
select(-row),
LUSC_1 <- LUSC %>% group_by(gen) %>% mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = gen, values_from = expresion_level) %>%
select(-row),
KIPAN_1 <- KIPAN %>% group_by(gen) %>% mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = gen, values_from = expresion_level) %>%
select(-row),
KIRP_1 <- KIRP %>% group_by(gen) %>% mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = gen, values_from = expresion_level) %>%
select(-row),
UCEC_1 <- UCEC %>% group_by(gen) %>% mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = gen, values_from = expresion_level) %>%
select(-row),
GAPH_1 <- UCEC %>% group_by(gen) %>% mutate(row = row_number()) %>%
tidyr::pivot_wider(names_from = gen, values_from = expresion_level) %>%
select(-row)
)
# Escriba el código para generar la lista.
expresion_gen_reg <- function (gen) {
if (gen == "GATA3"){
total <- list (
lapply(plots_cancer, function(x) {ggplot(x, aes(GATA3, PTEN)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(GATA3, XBP1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(GATA3, ESR1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(GATA3, MUC1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(GATA3, FN1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(GATA3, GAPDH)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
else if (gen == "PTEN"){
total <- list (
lapply(plots_cancer, function(x) {ggplot(x, aes(PTEN, GATA3)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(PTEN, XBP1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(PTEN, ESR1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(PTEN, MUC1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(PTEN, FN1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(PTEN, GAPDH)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
else if (gen == "XBP1"){
total <- list (
lapply(plots_cancer, function(x) {ggplot(x, aes(XBP1, GATA3)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(XBP1, PTEN)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(XBP1, ESR1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(XBP1, MUC1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(XBP1, FN1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(XBP1, GAPDH)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
else if (gen == "ESR1"){
total <- list (
lapply(plots_cancer, function(x) {ggplot(x, aes(ESR1, GATA3)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(ESR1, PTEN)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(ESR1, XBP1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(ESR1, MUC1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(ESR1, FN1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(ESR1, GAPDH)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
else if (gen == "MUC1"){
total <- list (
lapply(plots_cancer, function(x) {ggplot(x, aes(MUC1, GATA3)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(MUC1, PTEN)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(MUC1, XBP1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(MUC1, ESR1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(MUC1, FN1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(MUC1, GAPDH)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
else if (gen == "FN1"){
total <- list (
lapply(plots_cancer, function(x) {ggplot(x, aes(FN1, GATA3)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(FN1, PTEN)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(FN1, XBP1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(FN1, ESR1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(FN1, MUC1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(FN1, GAPDH)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
else if (gen == "GAPDH"){
total <- list (
lapply(plots_cancer, function(x) {ggplot(x, aes(GAPDH, GATA3)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(GAPDH, PTEN)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(GAPDH, XBP1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(GAPDH, ESR1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(GAPDH, MUC1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}),
lapply(plots_cancer, function(x) {ggplot(x, aes(GAPDH, FN1)) +
geom_point() + geom_smooth(method='lm', formula= y~x)}))
}
}
# Escriba el código para guardar el onceavo plot.
graficos_cancer <- expresion_gen_reg("GATA3")
graficos_cancer[[5]][[2]]
ggsave("C:/Users/Usuario/Desktop/examen_final/GBI6_ExamenFinal/results/regresion11.pdf", width = 6, height = 8, dpi = 300)
# Escriba el código para guardar el onceavo plot.
graficos_cancer <- expresion_gen_reg("GATA3")
graficos_cancer[[5]][[2]]
ggsave("C:/Users/Usuario/Desktop/examen_final/GBI6_ExamenFinal/results/regresion11.pdf", width = 4, height = 8, dpi = 300)
# Escriba el código para guardar el onceavo plot.
graficos_cancer <- expresion_gen_reg("GATA3")
graficos_cancer[[5]][[2]]
ggsave("C:/Users/Usuario/Desktop/examen_final/GBI6_ExamenFinal/results/regresion11.pdf", width = 6, height = 8, dpi = 300)
# Escriba el código para guardar el onceavo plot.
graficos_cancer <- expresion_gen_reg("GATA3")
graficos_cancer[[5]][[2]]
ggsave("C:/Users/Usuario/Desktop/examen_final/GBI6_ExamenFinal/results/regresion11.pdf", width = 5, height = 8, dpi = 300)
# Escriba el código para guardar el onceavo plot.
graficos_cancer <- expresion_gen_reg("GATA3")
graficos_cancer[[5]][[2]]
ggsave("C:/Users/Usuario/Desktop/examen_final/GBI6_ExamenFinal/results/regresion11.pdf", width = 5, height = 9, dpi = 300)
# Escriba el código para guardar el onceavo plot.
graficos_cancer <- expresion_gen_reg("GATA3")
graficos_cancer[[5]][[2]]
ggsave("C:/Users/Usuario/Desktop/examen_final/GBI6_ExamenFinal/results/regresion11.pdf", width = 5, height = 9, dpi = 300, color = "red")
# Escriba el código para guardar el onceavo plot.
graficos_cancer <- expresion_gen_reg("GATA3")
graficos_cancer[[5]][[2]]
ggsave("C:/Users/Usuario/Desktop/examen_final/GBI6_ExamenFinal/results/regresion11.pdf", width = 5, height = 9, dpi = 300, color = red)
# Escriba el código para guardar el onceavo plot.
graficos_cancer <- expresion_gen_reg("GATA3")
graficos_cancer[[5]][[2]]
ggsave("C:/Users/Usuario/Desktop/examen_final/GBI6_ExamenFinal/results/regresion11.pdf", width = 5, height = 9, dpi = 300)
View(long_df)
